# Probably going to be something like the following:
for business_email_address in the_adp_pandas_df:
    if business_email_address in mg_graph_pull:
        # match the email address to the mg_graph email address and use mg graph commands to 
        # update the user's information 



#############################################################

Need to add the following tables to the information I'm pulling:

##### JOB TITLE: #####
ANALYTICS.SOURCE.src_adp_work_assignments
WORK_ASSIGNMENT_WORKER_ID (Should be employee ID, can match and sort with the other pulls)

# Possibilities for job title. Not sure how these look. 
WORK_ASSIGNMENT_JOB_TITLE
WORK_ASSIGNMENT_JOB_LONG_NAME
WORK_ASSIGNMENT_JOB_SHORT_NAME

##### EMAIL ADDRESS: #####
ANALYTICS.SOURCE.src_adp_business_communication
BUSINESS_COMMUNICATION_WORKER_ID(should be employee ID)
BUSINESS_COMMUNICATION_EMAIL_URI

##### MANAGER INFORMATION: #####
# They may not have the manager information listed in here by name. Might have to create a function to look up the 
# manager's name by worker ID. 
ANALYTICS.SOURCE.src_adp_worker_report_to
WORKER_REPORT_TO_WORKER_ID


Data columns (total 21 columns):
 #   Column                                            Non-Null Count  Dtype                              
---  ------                                            --------------  -----                              
 0   PERSON_WORKER_ID                                  2871 non-null   object                             
 1   PERSON_LEGAL_FORMATTED_NAME                       2871 non-null   object                             
 2   PERSON_LEGAL_GIVEN_NAME                           2871 non-null   object                             
 3   PERSON_LEGAL_MIDDLE_NAME                          1134 non-null   object                             
 4   PERSON_LEGAL_FAMILY_NAME_1                        2871 non-null   object                             
 5   PERSON_LEGAL_FAMILY_NAME_2                        0 non-null      object                             
 6   PERSON_LEGAL_NICK_NAME                            237 non-null    object                             
 7   PERSON_NPI                                        788 non-null    object                             
 8   PERSON_LEGAL_CERTIFICATION_TITLE                  180 non-null    object                             
 9   PERSON_LEGAL_GENERATION_SUFFIX                    12 non-null     object                             
 10  PERSON_PREFERRED_FAMILY_NAME_1                    131 non-null    object                             
 11  PERSON_PREFERRED_FAMILY_NAME_2                    0 non-null      object                             
 12  PERSON_PREFERRED_GIVEN_NAME                       237 non-null    object                             
 13  PERSON_PREFERRED_MIDDLE_NAME                      14 non-null     object                             
 14  PERSON_LEGAL_ADDRESS_CITY_NAME                    2870 non-null   object                             
 15  PERSON_LEGAL_ADDRESS_COUNTRY_SUBDIVISION_LEVEL_1  2870 non-null   object                             
 16  PERSON_LEGAL_ADDRESS_COUNTRY_CODE                 2870 non-null   object                             
 17  PERSON_LEGAL_ADDRESS_POSTAL_CODE                  2870 non-null   object                             
 18  PERSON_BIRTH_EPOCH                                2871 non-null   object                             
 19  PERSON_TIMESTAMP                                  2871 non-null   datetime64[ns, America/Los_Angeles]
 20  MODEL_GENERATED_AT                                2871 non-null   datetime64[ns, America/Los_Angeles]
dtypes: datetime64[ns, America/Los_Angeles](2), object(19)
memory usage: 471.1+ KB
---------------
     PERSON_WORKER_ID              PERSON_LEGAL_FORMATTED_NAME PERSON_LEGAL_GIVEN_NAME PERSON_LEGAL_MIDDLE_NAME PERSON_LEGAL_FAMILY_NAME_1 PERSON_LEGAL_FAMILY_NAME_2 PERSON_LEGAL_NICK_NAME    PERSON_NPI PERSON_LEGAL_CERTIFICATION_TITLE PERSON_LEGAL_GENERATION_SUFFIX PERSON_PREFERRED_FAMILY_NAME_1 PERSON_PREFERRED_FAMILY_NAME_2 PERSON_PREFERRED_GIVEN_NAME PERSON_PREFERRED_MIDDLE_NAME PERSON_LEGAL_ADDRESS_CITY_NAME PERSON_LEGAL_ADDRESS_COUNTRY_SUBDIVISION_LEVEL_1 PERSON_LEGAL_ADDRESS_COUNTRY_CODE PERSON_LEGAL_ADDRESS_POSTAL_CODE PERSON_BIRTH_EPOCH                 PERSON_TIMESTAMP               MODEL_GENERATED_AT


-----------------------------------------------------------------------------------------------------

Hi Josh, Iâ€™ve granted you engineer_role in Snowflake. 

 

We currently ingest data from 24 ADP tables of which 7 have defined source models immediately available to you.

 

+-----------------------------------+

|name                               |

+-----------------------------------+

|BUSINESS_COMMUNICATION             |- SOURCE MODEL

|CLASSIFICATION                     |

|FIVETRAN_AUDIT                     |

|GROUPS                             |

|LOCATION                           |

|ORGANIZATIONAL_UNIT                |- SOURCE MODEL

|OTHER_PERSONAL_ADDRESS             |

|PERSON                             |- SOURCE MODEL

|PERSON_COMMUNICATION               |

|PERSON_DISABILITY                  |

|PERSON_GOVERNMENT_ID               |

|PERSON_HISTORY                     |

|PERSON_MILITARY_CLASSIFICATION     |

|PERSON_PREFERRED_SALUTATION        |

|PERSON_SOCIAL_INSURANCE_PROGRAM    |

|WORKER                             |- SOURCE MODEL

|WORKER_ASSIGNED_LOCATION           |

|WORKER_ASSIGNED_ORGANIZATIONAL_UNIT|- SOURCE MODEL

|WORKER_CLASSIFICATION              |

|WORKER_GROUP                       |

|WORKER_HOME_ORGANIZATIONAL_UNIT    |

|WORKER_REPORT_TO                   |- SOURCE MODEL

|WORK_ASSIGNMENT                    |- SOURCE MODEL

|WORK_ASSIGNMENT_HISTORY            |

+-----------------------------------+

These SQL statements will show you the available source and staging models. 

 

use role data_role;

use warehouse data_wh;

use database analytics;



show tables like '%ADP%' in schema analytics.source;

show tables like '%ADP%' in schema analytics.staging;



-- Sample query against the ADP Persons table

SELECT *

FROM

    analytics.source.src_adp_persons

WHERE

    person_worker_id IN ( '9V0WOIFLL' );

-- QUALIFY

--     ROW_NUMBER( ) OVER 

--         (PARTITION BY person_worker_id 

--         ORDER BY person_timestamp DESC ) = 1;
 

If you need access to data in any of other tables, let me know and we can come up with a plan to make that available.